#! /usr/bin/env node

/**
 * This file automatically generates the index registries for all directories specified in `directories` below. It runs automatically when `yarn preflight` runs or you can run it via `yarn genreg`
 */

import { readdirSync, writeFileSync } from 'fs';
import { resolve, extname, dirname } from 'path';
import camelCase from 'camelcase';
import chokidar from 'chokidar';
import prettier from 'prettier';

/**
 * Watch the following directories for changes and generate registries for them
 * Add an * to the end to work with subdirectories (make sure you don't add it if you don't want to include subdirectories or you'll get 'interesting' results)
 * Note: If you add a new directory tree structure you'll need to update 'trimmedDirectories' in the watcher below (e.g. if you add pages/home).
 */
export const directories = [
  'components/*',
  'partials',
  'lib/helpers',
  'lib/hooks',
  'lib/contexts',
  'lib/providers',
  'lib/services'
];

const message = `/***
This file is autogenerated, please do not edit it.
To generate an updated version, please run \`yarn genreg\`

If you register your helper with this index, it can be referenced more easily.

e.g. without registering

  import fetcher from '@helpers/fetcher
  import poster from '@helpers/poster

e.g. with registering

  import { fetcher, poster } from '@helpers/index'
*/`;

// Replaces old CJS __dirname with variable mapped to project root
const __dirname = dirname(resolve('./package.json'));
const include = '.ts|.tsx';
const exclude = `index|\\.spec\\.ts|\\.d\\.ts|\\.DS_Store|\\.gitkeep|\\.md|\\.mdx|\\.stories.|\\.snap|\\.DS_Store`;

const generateLines = (directory, parent) => {
  const dir = readdirSync(resolve(directory)).filter(
    (file) => !file.match(exclude)
  );
  // If dir is empty, do nothing
  if (dir.length !== 0) {
    return dir
      .map((file) => {
        const pathString = parent ? `${parent}/${file}` : file;
        // Files in the 'providers' directory are special cases
        if (directory.includes('providers')) {
          if (!file.match('.tsx')) return '';
          const fileNoExt = pathString.replace(extname(file), '');
          const fileName = camelCase(fileNoExt, {
            pascalCase: true
          });
          return `export { default as ${fileName}Provider } from './${fileNoExt}';`;
        }
        if (!file.match(include)) {
          return `export { default as ${camelCase(file, {
            pascalCase: true
          })} } from './${pathString}';`;
        }
        const fileNoExt = pathString.replace(extname(file), '');
        const varName = camelCase(fileNoExt);
        return `export { default as ${varName} } from './${fileNoExt}';`;
      })
      .filter((item) => item)
      .toString()
      .replace(/,/g, '\n');
  } else {
    return '';
  }
};
const runGenerator = (directory) => {
  let checkedDir = resolve(__dirname, directory.replace('/*', ''));
  let subdirs = [];
  let lines = '';

  if (directory.includes('*')) {
    // scan directory for subdirectories
    subdirs = readdirSync(checkedDir).filter((file) => !file.match(exclude));
    subdirs.forEach((dir) => {
      const pathString = resolve(`${checkedDir}/${dir}`);
      return (lines += `${generateLines(pathString, dir)}\n`);
    });
  } else {
    lines = generateLines(checkedDir);
  }

  const output = `${message}\n\n${lines}`;
  const cleanOutput = prettier.format(output, {
    parser: 'typescript',
    singleQuote: true
  });
  if (lines) {
    writeFileSync(resolve(checkedDir, `index.ts`), cleanOutput);
  }
};

(function () {
  // Run the generator once to start with
  directories.forEach((directory) => {
    runGenerator(directory);
  });
  // If the script is called with '--watch' or '-w'. Watch for changes to the target folder and re-run the script
  if (process.argv.includes('--watch') || process.argv.includes('-w')) {
    chokidar
      .watch(
        directories.map(
          (i) => `${__dirname}/${i.replace('./', '').replace('/*', '')}`
        ),
        {
          // ignore scss, mdx, stories, and index.ts files

          ignored: /\.mdx|\.stories\.tsx|\.module\.scss|index\.ts(?!x)/,
          ignoreInitial: true
        }
      )
      .on('ready', () => {
        console.log('Watching for changes to files with registries...');
      })
      .on('all', (event, path) => {
        console.log(event, path);
        // Strips the changed path down to just the watched directory
        const trimmedPath = dirname(path).replace(__dirname, '');
        directories.forEach((directory) => {
          // If the changed path matches the watched directory, run the generator
          const dirArray = directory.split('/');
          const pathArray = trimmedPath.split('/');
          // If the path array has any elements that are in the dirArray, run the generator
          if (pathArray.some((i) => dirArray.includes(i))) {
            runGenerator(directory);
          }
        });
      })
      .on('error', (error) => console.error(error));
  }
})();
